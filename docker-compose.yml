version: '3.2'

volumes:
  portainer_data:
  sonarqube_conf:
  sonarqube_data:
  sonarqube_extensions:
  postgresql:
  postgresql_data:
  sonarqube_bundled-plugins:

services:
  sonarqube:
    build:
      context: sonarqube/
    ports:
      - 9000:9000
      - 9092:9092
    container_name: sonarqube
    networks:
      - sonarnet    
    environment:
      - SONARQUBE_JDBC_URL=jdbc:postgresql://sonarqube_db/sonar
      - SONARQUBE_JDBC_USERNAME=sonar
      - SONARQUBE_JDBC_PASSWORD=sonar    
    restart: always
    volumes:
      - sonarqube_conf:/opt/sonarqube/conf
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions 
      - sonarqube_bundled-plugins:/opt/sonarqube/lib/bundled-plugins   
      
  sonarqube_db:
    image: postgres
    restart: always    
    ports:
      - 5433:5432
    container_name: sonarqube_db
    networks:
      - sonarnet    
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
    volumes:
      - postgresql:/var/lib/postgresql
      - postgresql_data:/var/lib/postgresql/data   
      
  jenkins:
    build:
      context: jenkins/
    privileged: true
    user: root
    ports:
      - 8080:8080
      - 50000:50000
    container_name: jenkins
    restart: always
    volumes:
      - ./jenkins/data:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - sonarqube
      
# ------------------------------------------------------------------------------
# admin password : adminpassword@@
# docker run --rm httpd:2.4-alpine htpasswd -nbB admin 'adminpassword@@' | cut -d ":" -f 2
# https://gist.github.com/deviantony/62c009b41bde5e078b1a7de9f11f5e55
#------------------------------------------------------------------------------
  portainer:
    image: portainer/portainer:linux-amd64-1.21.0
    container_name: portainer
    command: --admin-password '$$2y$$05$$.dARPJyZ9jJIDPhn05eW9eAUhJhaKQE1djkhmLSkQEFRN8WGuh2MS'
    restart: always
    ports:
      - 8000:9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
      
# ------------------------------------------------------------------------------
# DOCUMENTATION SECTION
#------------------------------------------------------------------------------
  wiki:
    image: mediawiki
    restart: always
    container_name: mediawiki
    networks:
      - wikinet     
    links:
      - db
    ports:
      - "8001:80"
    volumes:
      - ./mediawiki/data/images:/var/www/html/images
      # After the initial configuration, download LocalSettings.php and copy it to the mediawiki directory
      # then uncomment the following line and use compose to restart the mediawiki service 
      #- ./mediawiki/LocalSettings.php:/var/www/html/LocalSettings.php
  db:
    image: mariadb
    restart: always
    container_name: wiki_db
    networks:
      - wikinet    
    expose:
      - "3306"
    environment:
      MYSQL_DATABASE: my_wiki
      MYSQL_USER: wiki_user
      MYSQL_PASSWORD: wiki_password
      MYSQL_ROOT_PASSWORD: mariadb_secret
    # fix for volume issues on Docker for Windows
    command: mysqld --innodb-flush-method=fsync
    volumes:
      - ./mediawiki/data/db:/var/lib/mysql

  web:
    container_name: web
    build:
      context: nginx/
    restart: always
    ports:
      - 80:80
      - 443:443
    command: /bin/sh -c "envsubst 'localhost' < /etc/nginx/conf.d/default.template > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"    
    volumes:
       - ./nginx/etc/default.conf:/etc/nginx/conf.d/default.conf
       - ./nginx/etc/ssl:/etc/ssl
       - ./nginx/web:/var/www/html
       - ./nginx/etc/default.template.conf:/etc/nginx/conf.d/default.template    
     
networks:
  sonarnet:
  wikinet:
  